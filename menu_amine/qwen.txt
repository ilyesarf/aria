------------------header---------------------------
#ifndef HEADER_H_INCLUDED
#define HEADER_H_INCLUDED

#include <SDL/SDL.h>
#include <SDL/SDL_image.h>
#include <SDL/SDL_mixer.h>
#include <SDL/SDL_ttf.h>

// Button structure
typedef struct {
    SDL_Rect position; // Position and size of the button
    SDL_Surface* normalImage; // Image for the normal state
    SDL_Surface* hoverImage;  // Image for the hover state
    int isActive;             // Indicates if the button is currently active (hovered)
} Button;

// Function prototypes
int init_sdl();
SDL_Surface* create_window(int width, int height, int bpp, Uint32 flags);
SDL_Surface* load_image(const char* filename);
Mix_Music* load_music(const char* filename);
TTF_Font* load_font(const char* filename, int size);
void create_buttons(Button* buttons);
Button create_button(int x, int y, int w, int h, const char* normalPath, const char* hoverPath);
void update_button_state(Button* button, int mouseX, int mouseY);
void render_button(SDL_Surface* screen, Button* button);
void render_text(SDL_Surface* screen, const char* text, TTF_Font* font, SDL_Color color, SDL_Rect position);
void handle_button_click(Button* button, int* quitter, int* volume, SDL_Surface* ecran, int* showWindowModeText);
void cleanup_resources(SDL_Surface* image, Mix_Music* music, TTF_Font* font, Button* buttons, int buttonCount);
int is_mouse_over_button(Button* button, int mouseX, int mouseY);
void toggle_fullscreen(SDL_Surface* screen);
void main_game_loop(SDL_Surface* ecran, SDL_Surface* image, SDL_Rect posecranimg, Button* buttons, TTF_Font* font, TTF_Font* windowModeFont, Mix_Music* musique, int* quitter, int* volume, int* showWindowModeText, SDL_Color textColor );

#endif // HEADER_H_INCLUDED
------------------sources--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <SDL/SDL.h>
#include <SDL/SDL_image.h>
#include <SDL/SDL_mixer.h>
#include <SDL/SDL_ttf.h>
#include "header.h"
#include <stdio.h>

// Initialize SDL subsystems
int init_sdl() {
    if (SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO) < 0) {
        printf("Failed to initialize SDL: %s\n", SDL_GetError());
        return 1;
    }
    if (Mix_OpenAudio(44100, MIX_DEFAULT_FORMAT, 2, 2048) < 0) {
        printf("Failed to initialize SDL_mixer: %s\n", Mix_GetError());
        return 1;
    }
    if (TTF_Init() < 0) {
        printf("Failed to initialize SDL_ttf: %s\n", TTF_GetError());
        return 1;
    }
    return 0;
}

// Create a window
SDL_Surface* create_window(int width, int height, int bpp, Uint32 flags) {
    SDL_Surface* screen = SDL_SetVideoMode(width, height, bpp, flags);
    if (!screen) {
        fprintf(stderr, "Failed to create window: %s.\n", SDL_GetError());
    }
    return screen;
}

// Load an image
SDL_Surface* load_image(const char* filename) {
    SDL_Surface* loadedImage = IMG_Load(filename);
    if (!loadedImage) {
        printf("Failed to load image '%s': %s\n", filename, IMG_GetError());
    }
    return loadedImage;
}

// Load music
Mix_Music* load_music(const char* filename) {
    Mix_Music* music = Mix_LoadMUS(filename);
    if (!music) {
        printf("Failed to load music '%s': %s\n", filename, Mix_GetError());
    }
    return music;
}

// Load a font
TTF_Font* load_font(const char* filename, int size) {
    TTF_Font* font = TTF_OpenFont(filename, size);
    if (!font) {
        printf("Failed to load font '%s': %s\n", filename, TTF_GetError());
    }
    return font;
}

// Create buttons
void create_buttons(Button* buttons) {
    buttons[0] = create_button(400, 185, 150, 40, "button-removebg-preview.png", "redbutton-removebg-preview.png");
    buttons[1] = create_button(150, 650, 150, 40, "exit.png", "exit.png");
    buttons[2] = create_button(400, 350, 50, 40, "up-removebg-preview.png", "up-removebg-preview.png");
    buttons[3] = create_button(600, 350, 50, 40, "down-removebg-preview.png", "down-removebg-preview.png");
}

// Create a button
Button create_button(int x, int y, int w, int h, const char* normalPath, const char* hoverPath) {
    Button button;
    button.position.x = x;
    button.position.y = y;
    button.position.w = w;
    button.position.h = h;
    button.normalImage = IMG_Load(normalPath);
    button.hoverImage = IMG_Load(hoverPath);
    button.isActive = 0;
    return button;
}

// Check if the mouse is over a button
int is_mouse_over_button(Button* button, int mouseX, int mouseY) {
    return (mouseX >= button->position.x && mouseX <= button->position.x + button->position.w &&
            mouseY >= button->position.y && mouseY <= button->position.y + button->position.h);
}

// Update button state based on mouse position
void update_button_state(Button* button, int mouseX, int mouseY) {
    button->isActive = is_mouse_over_button(button, mouseX, mouseY);
}

// Render a button
void render_button(SDL_Surface* screen, Button* button) {
    // Declare a surface pointer for the image to render
    SDL_Surface* image = NULL;

    // Determine which image to render based on the button's active state
    if (button->isActive) {
        image = button->hoverImage; // Use hover image if the button is active
    } else {
        image = button->normalImage; // Use normal image otherwise
    }

    // Ensure the image is valid before rendering
    if (!image) {
        printf("Error: Button image is NULL. Cannot render button.\n");
        return;
    }

    // Render the button image at its position
    if (SDL_BlitSurface(image, NULL, screen, &button->position) < 0) {
        printf("Error rendering button: %s\n", SDL_GetError());
    }
}

// Render text on the screen
void render_text(SDL_Surface* screen, const char* text, TTF_Font* font, SDL_Color color, SDL_Rect position) {
    SDL_Surface* textSurface = TTF_RenderText_Solid(font, text, color);
    if (!textSurface) {
        printf("Failed to render text: %s\n", TTF_GetError());
        return;
    }
    SDL_BlitSurface(textSurface, NULL, screen, &position);
    SDL_FreeSurface(textSurface); // Free the text surface after rendering
}

// Handle button click
void handle_button_click(Button* button, int* quitter, int* volume, SDL_Surface* ecran, int* showWindowModeText) {
    if (button->position.x == 400 && button->position.y == 185) {
        printf("Start button clicked!\n");
        toggle_fullscreen(ecran);
        *showWindowModeText = 1; // Show "Window Mode" text
    } else if (button->position.x == 150 && button->position.y == 650) {
        printf("Quit button clicked!\n");
        *quitter = 0; // Exit the program
    } else if (button->position.x == 400 && button->position.y == 350) {
        printf("Volume Up button clicked!\n");
        *volume = (*volume + 5 > 100) ? 100 : *volume + 5;
        Mix_VolumeMusic(*volume);
    } else if (button->position.x == 600 && button->position.y == 350) {
        printf("Volume Down button clicked!\n");
        *volume = (*volume - 5 < 0) ? 0 : *volume - 5;
        Mix_VolumeMusic(*volume);
    }
}

// Toggle fullscreen/windowed mode
void toggle_fullscreen(SDL_Surface* screen) {
    if (SDL_WM_ToggleFullScreen(screen) == 0) {
        printf("Failed to toggle fullscreen: %s\n", SDL_GetError());
    }
}

// Main game loop function
void main_game_loop(SDL_Surface* ecran, SDL_Surface* image, SDL_Rect posecranimg, Button* buttons, TTF_Font* font, TTF_Font* windowModeFont, Mix_Music* musique, int* quitter, int* volume, int* showWindowModeText, SDL_Color textColor){
    SDL_Rect windowModeTextPos = {150, 250}, volumeLevelTextPos = {150, 400}; // Positions for texts
    char volumeLevelText[50]; // Buffer to hold volume level text
    // Render background
    SDL_BlitSurface(image, &posecranimg, ecran, NULL);

    // Render buttons
    for (int i = 0; i < 4; i++) {
        render_button(ecran, &buttons[i]);
    }

    // Render "Window Mode" text if the flag is set
    if (*showWindowModeText) {
        render_text(ecran, "Window Mode", windowModeFont, textColor, windowModeTextPos);
    }

    // Render current volume level text
    snprintf(volumeLevelText, sizeof(volumeLevelText), "Volume: %d", *volume);
    render_text(ecran, volumeLevelText, windowModeFont, textColor, volumeLevelTextPos);

    SDL_Flip(ecran); // Update screen
}

// Cleanup resources
void cleanup_resources(SDL_Surface* image, Mix_Music* music, TTF_Font* font, Button* buttons, int buttonCount) {
    if (image) SDL_FreeSurface(image);
    if (music) Mix_FreeMusic(music);
    if (font) TTF_CloseFont(font);
    for (int i = 0; i < buttonCount; i++) {
        if (buttons[i].normalImage) SDL_FreeSurface(buttons[i].normalImage);
        if (buttons[i].hoverImage) SDL_FreeSurface(buttons[i].hoverImage);
    }
    Mix_CloseAudio();
    TTF_Quit();
    SDL_Quit();
}
--------------------------main-----------------------------------------------------------------------------------------------------------------------------------
#include <SDL/SDL.h>
#include <SDL/SDL_image.h>
#include <SDL/SDL_mixer.h>
#include <SDL/SDL_ttf.h>
#include "header.h"

int main(int argc, char** argv) {
    SDL_Surface *ecran = NULL, *image = NULL;
    int quitter = 1, play = 0;
    SDL_Rect posecranimg = {0, 0};
    SDL_Color textColor = {0, 0, 0}; // Black color
    TTF_Font *font = NULL, *windowModeFont = NULL; // Separate font for "Window Mode" text
    Mix_Music *musique = NULL;
    SDL_Event event;
    int volume = 50; // Initial volume (50%)
    int showWindowModeText = 1; // Flag to show "Window Mode" text
    Button buttons[4];

    // Initialize SDL
    if (init_sdl()) {
        return 1;
    }

    // Create a window
    ecran = create_window(1792, 1024, 32, SDL_HWSURFACE | SDL_DOUBLEBUF);
    if (!ecran) {
        return 1;
    }

    // Load image
    image = load_image("222222_1.jpg");
    if (!image) {
        return 0;
    }

    // Set image position
    posecranimg.x = 0;
    posecranimg.y = 0;
    posecranimg.w = image->w;
    posecranimg.h = image->h;

    // Load font
    font = load_font("arial.ttf", 20);
    windowModeFont = load_font("arial.ttf", 40); // Larger font for "Window Mode" text

    // Load music
    musique = load_music("palestine.mp3");
    if (!musique) {
        return 0;
    }

    // Play music
    Mix_PlayMusic(musique, -1);
    Mix_VolumeMusic(volume); // Set initial volume

    // Create buttons
    create_buttons(buttons);

    // Main game loop
    while (quitter) {
        while (SDL_PollEvent(&event)) {
            switch (event.type) {
                case SDL_QUIT:
                    quitter = 0;
                    break;

                case SDL_KEYDOWN:
                    if (event.key.keysym.sym == SDLK_ESCAPE) {
                        quitter = 0;
                    }
                    break;

                case SDL_MOUSEBUTTONDOWN:
                    if (event.button.button == SDL_BUTTON_LEFT) {
                        // Check if any button was clicked
                        for (int i = 0; i < 4; i++) {
                            if (is_mouse_over_button(&buttons[i], event.button.x, event.button.y)) {
                                handle_button_click(&buttons[i], &quitter, &volume, ecran, &showWindowModeText);
                            }
                        }
                    }
                    break;
                case SDL_MOUSEBUTTONUP:
                    play = 0;
                    break;
                case SDL_MOUSEMOTION:
                    // Update button states for all buttons
                    for (int i = 0; i < 4; i++) {
                        update_button_state(&buttons[i], event.motion.x, event.motion.y);
                    }
                    break;
            }
        }

        main_game_loop(ecran, image, posecranimg, buttons, font, windowModeFont, musique, &quitter, &volume, &showWindowModeText, textColor );
    }

    // Cleanup resources
    cleanup_resources(image, musique, font, buttons, 4);
    TTF_CloseFont(windowModeFont); // Cleanup the larger font

    return 0;
}